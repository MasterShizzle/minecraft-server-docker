import at.phatbl.shellexec.*
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

buildscript {
  repositories.jcenter()
  dependencies.classpath 'at.phatbl:shellexec:+'
}

plugins {
  id "at.phatbl.shellexec" version "1.5.2"
}

ext {
  qname = "dm0275/minecraft-server"
  vanillaDirectories = ['data', 'mods', 'world']
  vanillaVersions = [
          '1.13.2': 'https://launcher.mojang.com/v1/objects/3737db93722a9e39eeada7c27e7aca28b144ffa7/server.jar',
          '1.14.4': 'https://launcher.mojang.com/v1/objects/3dc3d84a581f14691199cf6831b71ed1296a9fdf/server.jar',
          '1.15.2': 'https://launcher.mojang.com/v1/objects/bb2b6b1aefcd70dfd1892149ac3a215f6c636b07/server.jar'
  ]
  forgeDirectories = ['data_forge', 'mods', 'world_forge']
  forgeVersions = [
          '1.13.2': '25.0.219',
          '1.14.4': '28.2.1',
          '1.15.2': '31.1.14'
  ]
  port = "25565"
  latestTag = "${qname}:latest"
  latestTagForge = "${qname}:latest-forge"
  envVars = """export MC_IMAGE=${qname}:${vanillaVersions.keySet().last()} \
    PORT=${port} \
	JAVA_MIN_MEM=3G \
	JAVA_MAX_MEM=3G \
	GAMEMODE=1 \
	MAX_PLAYERS=10 \
	DATA_DIR=\$PWD/data \
	WORLD_DIR=\$PWD/world \
	MODS_DIR=\$PWD/mods"""
  envVarsForge = """export MC_IMAGE=${qname}:${forgeVersions.keySet().last()} \
    PORT=${port} \
	JAVA_MIN_MEM=3G \
	JAVA_MAX_MEM=3G \
	GAMEMODE=1 \
	MAX_PLAYERS=10 \
	DATA_DIR=\$PWD/data_forge \
	WORLD_DIR=\$PWD/world_forge \
	MODS_DIR=\$PWD/mods"""
}

task dockerLogin(type: ShellExec) {
  command = """
    printenv DOCKER_TOKEN \
    | docker login -u "\$DOCKER_USERNAME" \\
    --password-stdin"""
}

task setup {
  doLast {
    vanillaDirectories.forEach { dir ->
      mkdir(dir)
    }
  }
}

task setupForge {
  doLast {
    forgeDirectories.forEach { dir ->
      mkdir(dir)
    }
  }
}

task cleanDirs(type: Delete) {
  doLast {
    vanillaDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task cleanDirsForge(type: Delete) {
  doLast {
    forgeDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task run(type: ShellExec) {
  dependsOn setup
  command = "${envVars} && docker-compose up "
}

task runBackground(type: ShellExec) {
  dependsOn setup
  command = "${envVars} && docker-compose up -d"
}

task runForge(type: ShellExec) {
  dependsOn setup
  command = "${envVarsForge} && docker-compose up "
}

task runBackgroundForge(type: ShellExec) {
  dependsOn setup
  command = "${envVarsForge} && docker-compose up -d"
}

task stop(type: ShellExec) {
  command = "${envVars} && docker-compose stop"
}

vanillaVersions.keySet().toArray().each {  mcVersion ->
  if (mcVersion == vanillaVersions.keySet().toArray().last()) {
    tasks.create(name: "buildVanilla${mcVersion}", type: ShellExec) {
      command """
        docker build \
		--file vanilla/Dockerfile \
		--build-arg mc_version=${mcVersion} \
		--build-arg mc_url_link=${vanillaVersions.get(mcVersion)} \
        -t ${qname}:${mcVersion} \
		-t ${latestTag} ."""
    }
  } else  {
    tasks.create(name: "buildVanilla${mcVersion}", type: ShellExec) {
      command """
        docker build \
		--file vanilla/Dockerfile \
		--build-arg mc_version=${mcVersion} \
		--build-arg mc_url_link=${vanillaVersions.get(mcVersion)} \
        -t ${qname}:${mcVersion} ."""
    }
  }
}

vanillaVersions.keySet().toArray().each {  mcVersion ->
  if (mcVersion == vanillaVersions.keySet().toArray().last()) {
    tasks.create(name: "pushVanilla${mcVersion}", type: ShellExec) {
      command """
        docker push ${qname}:${mcVersion}
		docker push ${latestTag}"""
      dependsOn dockerLogin
    }
  } else {
    tasks.create(name: "pushVanilla${mcVersion}", type: ShellExec) {
      command "echo docker push ${qname}:${mcVersion}"
      dependsOn dockerLogin
    }
  }
}

task buildAllVanilla(dependsOn: tasks.matching { Task task -> task.name.startsWith("buildVanilla")})

task pushAllVanilla(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushVanilla")})

forgeVersions.keySet().toArray().each {  mcVersion ->
  if (mcVersion == forgeVersions.keySet().toArray().last()) {
    tasks.create(name: "buildForge${mcVersion}", type: ShellExec) {
      command """
        docker build \
		--file forge/Dockerfile \
		--build-arg mc_version=${mcVersion} \
        --build-arg forge_version=${forgeVersions.get(mcVersion)} \
        -t ${qname}:forge-${mcVersion} \
		-t ${latestTagForge} ."""
    }
  } else {
    tasks.create(name: "buildForge${mcVersion}", type: ShellExec) {
      command """
        docker build \
		--file forge/Dockerfile \
		--build-arg mc_version=${mcVersion} \
        --build-arg forge_version=${forgeVersions.get(mcVersion)} \
        -t ${qname}:forge-${mcVersion} ."""
    }
  }
}

forgeVersions.keySet().toArray().each {  mcVersion ->
  if (mcVersion == forgeVersions.keySet().toArray().last()) {
    tasks.create(name: "pushForge${mcVersion}", type: ShellExec) {
      command """
        docker push ${qname}:forge-${mcVersion}
		docker push ${latestTagForge}"""
      dependsOn dockerLogin
    }
  } else {
    tasks.create(name: "pushForge${mcVersion}", type: ShellExec) {
      command "docker push ${qname}:forge-${mcVersion}"
      dependsOn dockerLogin
    }
  }
}

task buildAllForge(dependsOn: tasks.matching { Task task -> task.name.startsWith("buildForge")})

task pushAllForge(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushForge")})
