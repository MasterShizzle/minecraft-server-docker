/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

buildscript {
  repositories.jcenter()
}

ext {
  qname = "dm0275/minecraft-server"
  worldName = System.getenv("WORLD") ?: "world"
  vanillaDirectories = ["data/$worldName/world", "data/$worldName/mods"]
  vanillaVersions = [
      '1.13.2': [
          'url': 'https://launcher.mojang.com/v1/objects/3737db93722a9e39eeada7c27e7aca28b144ffa7/server.jar'
      ],
      '1.14.4': [
          'url': 'https://launcher.mojang.com/v1/objects/3dc3d84a581f14691199cf6831b71ed1296a9fdf/server.jar'
      ],
      '1.15.2': [
          'url': 'https://launcher.mojang.com/v1/objects/bb2b6b1aefcd70dfd1892149ac3a215f6c636b07/server.jar'
      ],
      '1.16.4': [
          'url': 'https://launcher.mojang.com/v1/objects/35139deedbd5182953cf1caa23835da59ca3d7cd/server.jar'
      ]
  ]
  forgeDirectories = ["data_forge/$worldName/world", "data_forge/$worldName/mods"]
  forgeVersions = [
      '1.13.2': [
          'forgeVersion': '25.0.219'
      ],
      '1.14.4': [
          'forgeVersion': '28.2.1'
      ],
      '1.15.2': [
          'forgeVersion': '31.2.0'
      ],
      '1.16.4': [
          'forgeVersion': '35.1.4'
      ]
  ]
  port = "25565"
  latestTag = "${qname}:latest"
  latestTagForge = "${qname}:latest-forge"
  envVars = """export MC_IMAGE=${qname}:${vanillaVersions.keySet().last()} \
    PORT=${port} \
    JAVA_MIN_MEM=3G \
    JAVA_MAX_MEM=3G \
    GAMEMODE=1 \
    MAX_PLAYERS=10 \
    WORLD_DIR=\$PWD/data/${worldName}/world \
    MODS_DIR=\$PWD/data/${worldName}/mods"""
  envVarsForge = """export MC_IMAGE=${qname}:${forgeVersions.keySet().last()} \
    PORT=${port} \
    JAVA_MIN_MEM=3G \
    JAVA_MAX_MEM=3G \
    GAMEMODE=1 \
    MAX_PLAYERS=10 \
    WORLD_DIR=\$PWD/data_forge/${worldName}/world \
    MODS_DIR=\$PWD/data_forge/${worldName}/mods"""
}

task dockerLogin(type: Exec) {
  commandLine "bash", "-c",  """printenv DOCKER_TOKEN \
    | docker login -u "\$DOCKER_USERNAME" --password-stdin"""
}

task setup {
  doLast {
    vanillaDirectories.forEach { dir ->
      mkdir(dir)
    }
  }
}

task setupForge {
  doLast {
    forgeDirectories.forEach { dir ->
      mkdir(dir)
    }
  }
}

task cleanDirs(type: Delete) {
  doLast {
    vanillaDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task cleanDirsForge(type: Delete) {
  doLast {
    forgeDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task run(type: Exec) {
  dependsOn setup
  commandLine "bash", "-c", "${envVars} && docker-compose up"
}

task runBackground(type: Exec) {
  dependsOn setup
  commandLine "bash", "-c", "${envVars} && docker-compose up -d"
}

task runForge(type: Exec) {
  dependsOn setupForge
  commandLine "bash", "-c", "${envVarsForge} && docker-compose up"
}

task runBackgroundForge(type: Exec) {
  dependsOn setupForge
  commandLine "bash", "-c", "${envVarsForge} && docker-compose up -d"
}

task stop(type: Exec) {
  commandLine "bash", "-c", "${envVars} && docker-compose stop"
}

vanillaVersions.keySet().each { version ->
  String buildCmd = """docker build \
            --file vanilla/Dockerfile \
            --build-arg mc_version=${version} \
            --build-arg mc_url_link=${vanillaVersions.get(version)['url']} \
            -t ${qname}:${version}"""
  tasks.create(name: "buildVanilla${version}", type: Exec) {
    if (version == vanillaVersions.keySet().last()) {
      commandLine "${buildCmd} -t ${latestTag} .".tokenize()
    } else {
      commandLine "${buildCmd} .".tokenize()
    }
  }

  tasks.create(name: "pushVanilla${version}", dependsOn: dockerLogin, type: Exec) {
    if (version == vanillaVersions.keySet().last()) {
      commandLine "bash", "-c", """docker push ${qname}:${version} \
            && docker push ${latestTag}"""
    } else {
      commandLine "docker push ${qname}:${version}".tokenize()
    }
  }
}

task buildAllVanilla(dependsOn: tasks.matching { Task task -> task.name.startsWith("buildVanilla")})

task pushAllVanilla(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushVanilla")})

forgeVersions.keySet().toArray().each {  version ->
  String buildCmd = """docker build \
        --file forge/Dockerfile \
        --build-arg mc_version=${version} \
        --build-arg forge_version=${forgeVersions.get(version)['forgeVersion']} \
        -t ${qname}:forge-${version}"""
  tasks.create(name: "buildForge${version}", type: Exec) {
    if (version == forgeVersions.keySet().toArray().last()) {
      commandLine "${buildCmd} -t ${latestTagForge} .".tokenize()
    } else {
      commandLine "${buildCmd} .".tokenize()
    }
  }

  tasks.create(name: "pushForge${version}", dependsOn: dockerLogin, type: Exec) {
    if (version == forgeVersions.keySet().toArray().last()) {
      commandLine "bash", "-c", """docker push ${qname}:forge-${version} \
            && docker push ${latestTagForge}"""
    } else {
      commandLine "docker push ${qname}:forge-${version}".tokenize()
    }
  }
}

task buildAllForge(dependsOn: tasks.matching { Task task -> task.name.startsWith("buildForge")})

task pushAllForge(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushForge")})
